row.names(timaSpent)
row.names(timeSpent)
timeSpent$id<-row.names(timeSpent[,])
timeSpent[,]
timeSpent[,1]
timeSpent[1]
timeSpent<-compute_time_spent(data[,c("id","time","state")])
timeSpent[,1]
timeSpent[,"C"]
names(timeSpent[,"C"])
ncol(timeSpent)
data<-read.csv("Desktop/careWithGroupVar.csv")
mod=unique(data[,"state"])
timeSpent<-compute_time_spent(data[,c("id","time","state")])
gp<-unique(data[,"csp"])
lapply(mod, function(par){
data<-as.data.frame(matrix(ncol=ncol(timeSpent),nrow=0))
#for(i in gp){
# }
#data<-data_used[data_used[,"csp"]==par,]
# if(input$choixGraphiqueStats=="summary"){
#  p <- summary_cfd(data[,c("id","state","time")])
# })
#}
data
})
for(i in gp){
idToKeep<-data[data[,"csp"]==gp,"id"]
}
for(i in gp){
idToKeep<-data[data[,"csp"]==i,"id"]
}
names(timeSpent %in% 1)
timeSpent %in% 1
names(timeSpent %in% 97)
timeSpent %in% 97
names(timeSpent) %in% 97
names(timeSpent) %in% 97
names(timeSpent[,"C"]) %in% 97
names(timeSpent[,"C"])
timeSpent[names(timeSpent[,"C"])=9,"C"])
timeSpent[names(timeSpent[,"C"])==9,"C"])
timeSpent[names(timeSpent[,"C"])==9,"C"]
head(timeSpent)
timeSpent[names(timeSpent[,"D"])==9,"D"]
timeSpent[names(timeSpent[,"D"])==13,"D"]
data<-read.csv("Desktop/careWithGroupVar.csv")
mod=unique(data[,"state"])
timeSpent<-compute_time_spent(data[,c("id","time","state")])
gp<-unique(data[,"csp"])
lapply(mod, function(par){
data<-as.data.frame(matrix(ncol=8,nrow=0))
for(i in gp){
idToKeep<-unique(data[data[,"csp"]==i,"id"])
time<-timeSpent[names(timeSpent[,i]) %in% idToKeep,i]
q<-quantile(time)
data<-rbind.data.frame(data,data.frame(mean=round(mean(time),2),
median=round(q[3],2),
Q1=round(q[2],2),
Q3=round(q[4],2),
min=round(q[1],2),
max=round(q[5],2),
sd=round(sd(time),2),
nbInd=length(time)))
}
#data<-data_used[data_used[,"csp"]==par,]
# if(input$choixGraphiqueStats=="summary"){
#  p <- summary_cfd(data[,c("id","state","time")])
# })
#}
data
})
data<-read.csv("Desktop/careWithGroupVar.csv")
idToKeep<-unique(data[data[,"csp"]==i,"id"])
time<-timeSpent[names(timeSpent[,i]) %in% idToKeep,i]
i
timeSpent[names(timeSpent[,i]) %in% idToKeep,i]
names(timeSpent[,i]) %in% idToKeep
timeSpent[,i]
data<-read.csv("Desktop/careWithGroupVar.csv")
mod=unique(data[,"state"])
timeSpent<-compute_time_spent(data[,c("id","time","state")])
gp<-unique(data[,"csp"])
lapply(mod, function(par){
data<-as.data.frame(matrix(ncol=8,nrow=0))
for(i in gp){
idToKeep<-unique(data[data[,"csp"]==i,"id"])
time<-timeSpent[names(timeSpent[,par]) %in% idToKeep,par]
q<-quantile(time)
data<-rbind.data.frame(data,data.frame(mean=round(mean(time),2),
median=round(q[3],2),
Q1=round(q[2],2),
Q3=round(q[4],2),
min=round(q[1],2),
max=round(q[5],2),
sd=round(sd(time),2),
nbInd=length(time)))
}
#data<-data_used[data_used[,"csp"]==par,]
# if(input$choixGraphiqueStats=="summary"){
#  p <- summary_cfd(data[,c("id","state","time")])
# })
#}
data
})
data<-read.csv("Desktop/careWithGroupVar.csv")
mod=unique(data[,"state"])
timeSpent<-compute_time_spent(data[,c("id","time","state")])
gp<-unique(data[,"csp"])
lapply(mod, function(par){
d<-as.data.frame(matrix(ncol=8,nrow=0))
for(i in gp){
idToKeep<-unique(data[data[,"csp"]==i,"id"])
time<-timeSpent[names(timeSpent[,par]) %in% idToKeep,par]
q<-quantile(time)
d<-rbind.data.frame(d,data.frame(mean=round(mean(time),2),
median=round(q[3],2),
Q1=round(q[2],2),
Q3=round(q[4],2),
min=round(q[1],2),
max=round(q[5],2),
sd=round(sd(time),2),
nbInd=length(time)))
}
#data<-data_used[data_used[,"csp"]==par,]
# if(input$choixGraphiqueStats=="summary"){
#  p <- summary_cfd(data[,c("id","state","time")])
# })
#}
d
})
data<-read.csv("Desktop/careWithGroupVar.csv")
mod=unique(data[,"state"])
timeSpent<-compute_time_spent(data[,c("id","time","state")])
gp<-unique(data[,"csp"])
lapply(mod, function(par){
d<-as.data.frame(matrix(ncol=8,nrow=0))
for(i in gp){
idToKeep<-unique(data[data[,"csp"]==i,"id"])
time<-timeSpent[names(timeSpent[,par]) %in% idToKeep,par]
q<-quantile(time)
d<-rbind.data.frame(d,data.frame(mean=round(mean(time),2),
median=round(q[3],2),
Q1=round(q[2],2),
Q3=round(q[4],2),
min=round(q[1],2),
max=round(q[5],2),
sd=round(sd(time),2),
nbInd=length(time)))
}
row.names(d)<-gp
d
})
test<-data.frame(id=c(1,1,2,3,4),time=c(NA,"T",NA,NA,NA))
unique(test)
unique(test[,"time"])
unique(test[test$time=NA,"time"])
unique(test[test$time==NA,"time"])
library(remotes)
install_github("modal-inria/cfda", build_vignettes = TRUE)
RShowDoc("cfda", package = "cfda")
library(cfda)
data(care)
d2<-care[1:100,]
d<-cut_data(d2,prolongLastState = c("S"))
d<-cut_data(d2,Tmax=20,prolongLastState = c("S"))
plotData(d)
head(d)
head(d2)
d1<-cut_data(d2,Tmax=20)
head(d1)
head(d2)
cut_data(d2,Tmax=20,prolongLastState = c("S"))
plotData(d1)
d1<-cut_data(d2,Tmax=20,prolongLastState = c("S"))
plotData(d1)
plot(d1)
plot(care[1:10])
plot(care[1:10,])
plotData(care[1:10,])
head(care)
fmca<-compute_optimal_encoding(d1,basis)
d1[d1$state==NA,]
d1
d1[d1$state==NA,"state"]="Not observable"
d1[d1$state==NA,"state"]<-"Not observable"
d<-d1[d1$id %in% c(3,9,13),]
d
d[2,3]
d[2,3]="Not observable"
d[5,3]="Not observable"
d[8,3]="Not observable"
d
plotData(d)
plotData(care[care$id %in% c(3,9,13)])
plotData(care[care$id %in% c(3,9,13),])
plotData(care[care$id %in% c(3,9,13),])
plotData(d)
rm(list=ls())
library(cfda)
data(care2)
data(care)
d2 <- data.frame(id = rep(c(3, 9, 13), each = 2),
time = c(0, 5, 0, 1, 0, 7),
state = "D")
d <- cut_data(d2, Tmax = 20, prolongLastState = c("S"))
d
d <- cut_data(care, Tmax = 20, prolongLastState = c("S"))
d
d <- cut_data(care, Tmax = 20, prolongLastState = c("S"),warning=TRUE)
d
d2 <- data.frame(id = rep(c(3, 9, 13), each = 2),
time = c(0, 5, 0, 1, 0, 7),
state = "D")
d2
d <- cut_data(d2, Tmax = 20, prolongLastState = c("S"))
d
d <- cut_data(care, Tmax = 20, prolongLastState = c("S"),warning=TRUE)
d
library(shiny)
library(shinydashboard)
runApp('Desktop/cfda_shiny')
runApp()
runApp('Desktop/cfda_shiny')
runApp()
runApp('Desktop/cfda_shiny')
load("Downloads/resClu.RData")
class<-results_clustering$cluster
table(class)
t(table(class))
as.data.frame(table(class))
d<-as.data.frame(table(class))
colnames(d)<-c("cluster","Freq")
d
runApp('Desktop/cfda_shiny')
prop.table(class)
prop.table(table(class))
round(prop.table(table(class)),4)*100
runApp('Desktop/cfda_shiny')
data(care)
d=care[which(care$id %in% c(1,100)),]
plotData(d)
d=care[care$id %in% c(1,100),]
plotData(d)
d=care[care$id %in% c(1:100),]
plotData(d)
d1<-cut_data(d,Tmax=25,prolongLastState = c("S"))
head(d1)
library(remotes)
install_github("modal-inria/cfda", build_vignettes = TRUE)
RShowDoc("cfda", package = "cfda")
d1<-cut_data(d,Tmax=25,prolongLastState = c("S"))
head(d1)
rm(list=ls())
d2 <- data.frame(id = rep(c(3, 9, 13), each = 2),
time = c(0, 5, 0, 1, 0, 7),
state = "D")
d <- cut_data(d2, Tmax = 20, prolongLastState = c("S"))
head(d)
str(d2)
str(care)
data(care)
str(care)
plotData(d)
plotData(d2)
plotData(d)
install.packages("~/Downloads/cfda_0.10.1-2.tar", repos = NULL)
install.packages("~/Downloads/cfda_0.10.1-2.tar", repos = NULL)
install.packages("~/Downloads/cfda_0.10.1-2.tar", repos = getOption("repos"))
install.packages("~/Downloads/cfda_0.10.1-2.tar", repos = getOption("repos"))
shiny::runApp('Desktop/cfda_shiny')
if (!require('shiny')) install.packages("shiny")
shiny::runGitHub("cfda_shiny", "modal-inria")
if (!require('shiny')) install.packages("shiny")
shiny::runGitHub("cfda_shiny", "modal-inria",display.mode="showcase")
shiny::runApp("cfda_shiny", "modal-inria",display.mode="showcase")
shiny::runApp(display.mode="showcase")
shiny::runApp("Desktop/cfda_shiny/",display.mode="showcase")
shiny::runApp("cfda_shiny", "modal-inria")
if (!require('shiny')) install.packages("shiny")
shiny::runGitHub("cfda_shiny", "modal-inria")
if (!require('shiny')) install.packages("shiny")
shiny::runGitHub("cfda_shiny", "modal-inria")
update.packages("cfda")
update.packages("cfda")
remove.packages(cfda)
remove.packages("cfda")
install.packages(cfda)
install.packages("cfda")
install.packages("cfda")
runApp('Desktop/cfda_shiny')
if (!require('shiny')) install.packages("shiny")
shiny::runGitHub("cfda_shiny", "modal-inria")
d<-read_csv2("Desktop/careWithGroupVar.csv")
head(d)
plotData(d[,c("id","time","state")])
d$state<-as.factor(d$state)
plotData(d[,c("id","time","state")])
d
data(care2)
data(care)
plotData(care)
runApp('Desktop/cfda_shiny')
care
plotData(care)
runApp('Desktop/cfda_shiny')
plotData(care)
plotData(d[,c("id","time","state")])
head(d)
data(care)
head(care)
str(care)
plotData(care)
plotData(care[care$id %in% 1:100,])
plotData(care[care$id %in% 1:500,])
plotData(care[care$id %in% 1:110,])
plotData(care[care$id %in% 1:120,])
plotData(care[care$id %in% 1:130,])
plotData(care[care$id %in% 1:400,])
plotData(care[care$id %in% 1:300,])
plotData(care[care$id %in% 1:350,])
plotData(care[care$id %in% 1:320,])
plotData(care[care$id %in% 1:310,])
for(i in 1:400){}
for(i in 1:400){
plotData(care[care$id %in% i,])
}
for(i in unique(care$id)){
plotData(care[care$id %in% i,])
}
for(i in unique(care$id)){
plotData(care[care$id %in% i,])
}
unique(care$id)
for(i in c(unique(care$id))){
plotData(care[care$id %in% i,])
}
for(i in c(unique(care$id))){
plotData(care[care$id == i,])
}
id<-unique(care$id)
for(i in id){
plotData(care[care$id == i,])
}
for(i in id){
plotData(care[care$id == i,])
}
i=3
plotData(care[care$id == i,])
care[care$id == i,]
plotData(care[care$id == i,])
View(data)
plotData(care[care$id %in% c(1,390),])
plotData(care[care$id %in% c(3,390),])
plotData(care[care$id %in% c(3,390),])
plotData(care[care$id %in% c(3,9),])
plotData(care[care$id %in% c(3,9),])
plotData(care[care$id %in% c(3,9,15),])
care[care$id %in% c(3,9,15),]
plotData(care)
remove.packages("cfda")
rm(list=ls())
rm(list=ls())
library(remotes)
install_github("modal-inria/cfda", build_vignettes = TRUE)
library(cfda)
data(care)
plotData(care[care$id %in% c(3,9,15),])
care[care$id %in% c(3,9,15),]
seq_len(10)
help(by)
d$id<-as.factor(d$id)
data(care)
head(care)
str(care)
plotData(care)
d<-read_csv2("Desktop/careWithGroupVar.csv")
care$id<-as.factor(care$id)
data(care)
head(care)
str(care)
plotData(care)
care$id<-as.factor(care$id)
str(care)
plotData(care)
care$id<-as.character(care$id)
str(care)
plotData(care)
library(remotes)
install_github("modal-inria/cfda", build_vignettes = TRUE)
data(care)
plotData(care[care$id %in% c(3,9,15),])
plotData(care[care$id %in% c(3,9,15),])
data(care)
plotData(care[care$id %in% c(3,9,15),])
care[care$id %in% c(3,9,15),]
remove.packages("cfda")
library(remotes)
install_github("modal-inria/cfda", build_vignettes = TRUE)
data(care)
plotData(care[care$id %in% c(3,9,15),])
install.packages("Downloads/cfda_0.10.1-3.tar", repos = NULL, type="source")
data(care)
plotData(care[care$id %in% c(3,9,15),])
plotData(care[care$id %in% c(3,9,15),])
data(care)
plotData(care[care$id %in% c(3,9,15),])
plotData(care)
rm(list=ls())
data(care)
library(cfda)
data(care)
plotData(care)
install.packages("Downloads/cfda_0.10.1.tar", repos = NULL, type="source")
library(cfda)
data(care)
plotData(care)
str(care)
d<-generate_Markov(100)
plotData(d)
d
plotData(d)
str(care)
d<-generate_Markov(100)
plotData(d)
library(cfda)
data(care)
plotData(care)
library(cfda)
d<-generate_Markov(100)
plotData(d)
remove.packages("cfda")
rm(list=ls())
install.packages("Downloads/cfda_0.10.1.tar", repos = NULL, type="source")
data(care)
library(care)
library(cfda)
data(care)
plotData(care)
remove.packages("cfda")
install.packages("Downloads/cfda_0.10.1-2.tar", repos = NULL, type="source")
library(cfda)
data(care)
plotData(care)
shiny::runApp('Desktop/cfda_shiny')
runApp('Desktop/cfda_shiny')
shiny::runApp()
install.packages("~/Desktop/demoModalPlateau/RMixtCompPlot_0.2.tar.gz", repos = NULL, type = "source")
runApp('~/Desktop/demoModalPlateau/smartDataApp')
install.packages("randomForest")
install.packages("raster")
runApp('~/Desktop/demoModalPlateau/smartDataApp')
runApp()
runApp('~/Desktop/demoModalPlateau/smartDataApp/demo/alstom')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/demoModalPlateau/smartDataApp')
library(cfda)
data(care)
duration<-compute_duration(care)
idToKeep<-names(duration[duration>18])
data<-cut_data(care[care$id %in% idToKeep,])
data<-cut_data(care[care$id %in% idToKeep,],18)
data
basis<-create.bspline.basis(c(0,18),nbasis=4)
fmca<-compute_optimal_encoding(data,basis)
plotComponent(fmca,c(1,2))
hc <- hclust(dist(fmca$pc[, 1:nPc90]), method = "ward.D2")
hc <- hclust(dist(fmca$pc), method = "ward.D2")
plot(hc, labels = FALSE)
class <- cutree(hc, k = 4)
p<-plotComponent(fmca,c(1,2))
p
class
pc<-cbind.data.frame(fmca$pc,cluster=as.vector(class))
head(pc)
ggplot(data,aes(x=1,y=2))+geom_point()
ggplot(data,aes(x=`1`,y=`2`))+geom_point()
ggplot(pc,aes(x=`1`,y=`2`))+geom_point()
ggplot(pc,aes(x=`1`,y=`2`,color=cluster))+geom_point()
ggplot(pc,aes(x=`1`,y=`2`,color=as.factor(cluster)))+geom_point()
plotData(data,class=class)
plotData(data,group=class)
plotData(data,group=class,addId=F,border=F)
plotData(data,group=class,addId=F,addBorder=F)
plotData(data,group=class,addId=F,addBorder=F,sort=T)
library(shiny)
runGitHub("cfda_shiny","modal-inria")
runApp()
runApp()
12.88+1.72+0.92+2.92
9.42+8.16+0.18+0.24
duration<-compute_duration(care)
idToKeep<-names(duration[duration>=18])
data<-cut_data(care[care$id %in% idToKeep,],18)
data
basis<-create.bspline.basis(c(0,18),nbasis=4)
fmca<-compute_optimal_encoding(data,basis)
hc <- hclust(dist(fmca$pc), method = "ward.D2")
class <- cutree(hc, k = 4)
pc<-cbind.data.frame(fmca$pc,cluster=as.vector(class))
ggplot(pc,aes(x=`1`,y=`2`,color=as.factor(cluster)))+geom_point()
plotData(data,group=class,addId=F,addBorder=F,sort=T)
results<-list(data=data,fmca=fmca,class=class,hc=hc)
save(results,file=" patientpath.Rdata")
runApp('~/Desktop/demoModalPlateau/smartDataApp')
runApp('~/Desktop/demoModalPlateau/smartDataApp')
